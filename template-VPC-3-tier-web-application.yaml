#######################################################################################################################################
Resources:
  
  VirtualPrivateCloud:
    Description: The VPC inside which all Resources would be created.
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: !Ref VPCCidrBlock
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: Application-VPC

  InternetGateway:
    Description: Internet Gateway for the VPC.
    Type: AWS::EC2::InternetGateway
  
  AttachGateway:
    Description: Attach Internet Gateway with the VPC.
    Type: AWS::EC2::VPCGatewayAttachment
    Properties: 
      VpcId: !Ref VirtualPrivateCloud
      InternetGatewayId: !Ref InternetGateway

  InternetRouteTable:
    Description: A route table with a route to the internet.
    Type: AWS::EC2::RouteTable
    Properties: 
      VpcId: !Ref VirtualPrivateCloud
      Tags:
      - Key: Name
        Value: Public-Route-Table
      


  RouteToIGW:
    Description: Define a route to the internet in InternetRouteTable.
    Type: AWS::EC2::Route
    Properties: 
      RouteTableId: !Ref InternetRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1:
    Description: Public Subnet in Availability Zone 1.
    Type: AWS::EC2::Subnet
    Properties: 
      VpcId: !Ref VirtualPrivateCloud
      CidrBlock:      
        Fn::Select:
          - 0
          - Fn::Cidr:
            - !Ref VPCCidrBlock
            - 6
            - 8       
      MapPublicIpOnLaunch: 'true'
      AvailabilityZone: 
        Fn::Select:
          - 0
          - Fn::GetAZs: ""
      Tags:
        - Key: Name
          Value: Public-Subnet1

  PublicSubnet2:
    Description: Public subnet in Availibility zone 1
    Type: AWS::EC2::Subnet
    Properties: 
      VpcId: !Ref VirtualPrivateCloud
      CidrBlock: 
        Fn::Select:
          - 1
          - Fn::Cidr:
            - !Ref VPCCidrBlock
            - 6
            - 8       
      MapPublicIpOnLaunch: 'true'
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: ""
      Tags:
        - Key: Name
          Value: Public-Subnet2

  PrivateSubnet1:
    Description: Private Subnet in Availability Zone 1
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VirtualPrivateCloud
      CidrBlock: 
        Fn::Select:
          - 2
          - Fn::Cidr:
            - !Ref VPCCidrBlock
            - 6
            - 8       
      MapPublicIpOnLaunch: 'false'
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: ""

      Tags:
        - Key: Name
          Value: Private-Subnet1

  PrivateSubnet2:
    Description: Private Subnet in Availability Zone 1.
    Type: AWS::EC2::Subnet
    Properties: 
      VpcId: !Ref VirtualPrivateCloud
      CidrBlock: 
        Fn::Select:
          - 3
          - Fn::Cidr:
            - !Ref VPCCidrBlock
            - 6
            - 8 
      MapPublicIpOnLaunch: 'false'
      AvailabilityZone: 
        Fn::Select:
          - 1 
          - Fn::GetAZs: ""
      Tags: 
        - Key: Name
          Value: Private-Subnet2

  RDSSubnet1:
    Description: Private Subnet in Availability Zone 1
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VirtualPrivateCloud
      CidrBlock: 
        Fn::Select:
          - 4
          - Fn::Cidr:
            - !Ref VPCCidrBlock
            - 6
            - 8 
      MapPublicIpOnLaunch: 'false'
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: ""          
      Tags:
        - Key: Name
          Value: RDS-Private-Subnet1
   RDSSubnet2:
    Description: Private Subnet in Availability Zone 1
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VirtualPrivateCloud
      CidrBlock: 
        Fn::Select:
          - 5
          - Fn::Cidr:
            - !Ref VPCCidrBlock
            - 6
            - 8 
      MapPublicIpOnLaunch: 'false'
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: ""          
      Tags:
        - Key: Name
          Value: RDS-Private-Subnet2
  RDSSubnetGroup:
    Description: DB Subnet group for RDS instances.
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Subnet group for RDS instances
      DBSubnetGroupName: application-db-subnet-group
      SubnetIds:
        - !Ref RDSSubnet1
        - !Ref RDSSubnet2
      Tags:
        - Key: Name
          Value: App-DB-Subnet-Group          


  AssociatePublicRouteTableWithPublicSubnet1:
    Description: Associate InternetRouteTable to PublicSubnet1, so that it becomes a public subnet.
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref InternetRouteTable
      SubnetId: !Ref PublicSubnet1

  AssociatePublicRouteTableWithPublicSubnet2:
    Description: Associate InternetRouteTable to PublicSubnet2, so that it becomes a public subnet.
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref InternetRouteTable
      SubnetId: !Ref PublicSubnet2

  ApplicationServer1:
    Description: Web-server tier EC2 instance.
    Type: 'AWS::EC2::Instance'
    Properties:
      ImageId: !Ref ApplicationImageId
      InstanceType: !Ref ApplicationInstanceType
      KeyName: !Ref KeyName
      SubnetId: !Ref PrivateSubnet1
      SecurityGroupIds:
      - !Ref ApplicationServerSecurityGroup
      - !Ref ApplicationSecurityGroup      

      Tags:
        - Key: Name
          Value: ApplicationServer-Instance1      

  ApplicationServer2:
    Description: Web-server tier EC2 Instance
    Type: 'AWS::EC2::Instance'
    Properties:
      ImageId: !Ref ApplicationImageId
      InstanceType: !Ref ApplicationInstanceType
      KeyName: !Ref KeyName
      SubnetId: !Ref PrivateSubnet2
      SecurityGroupIds:
      - !Ref ApplicationServerSecurityGroup
      - !Ref ApplicationSecurityGroup      
      
      Tags:
        - Key: Name
          Value: ApplicationServer-Instance2

  PrivateSubnet1:
    Description: Private Subnet in Availability Zone 1.
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VirtualPrivateCloud
      CidrBlock: 172.1.2.0/24
      MapPublicIpOnLaunch: 'false'
      AvailabilityZone: 
        Fn::Select:
          - 0
          - Fn::GetAZs: ""
      Tags:
        - Key: Name
          Value: Private-Subnet1

  ApplicationServerSecurityGroup:
    Description: security group allowing the web traffic from across the globe.
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: "Allow HTTP and HTTPS traffic from the open internet."
      VpcId: !Ref VirtualPrivateCloud
      SecurityGroupIngress: 
        - CidrIp: 0.0.0.0/0
          FromPort: '80'
          IpProtocol: tcp
          ToPort: '80'
        - CidrIp: 0.0.0.0/0
          FromPort: '443'
          IpProtocol: tcp
          ToPort: '443'
      Tags:
        - Key: Name
          Value: SG-ApplicationServer

  InternalSSHOnlySecurityGroup:
    Description: Security Group allowing users to securely access the instance.
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: "Allow SSh Traffic."
      VpcId: !Ref VirtualPrivateCloud
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          FromPort: '22'
          IpProtocol: tcp
          ToPort: '22'

      Tags:
        - Key: Name  
          Value: SG-SSH-Only

  ApplicationSecurityGroup:
    Description: This security group would allow ingress from the Web Security Group.
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Allow traffic from the Load Balancer security group"
      VpcId: !Ref VirtualPrivateCloud
      SecurityGroupIngress:
        - SourceSecurityGroupId: !Ref WebSecurityGroup
          IpProtocol: tcp
          FromPort: 1
          ToPort: 65000          

  ApplicationLoadBalancer:
    Description: Load Balancer for the application.
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    DependsOn: AttachGateway
    Properties: 
      Type: application
      IpAddressType: ipv4
      Name: awesomeapp
      Scheme: internet-facing
      SecurityGroups: 
        - !Ref ApplicationServerSecurityGroup
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      Tags:
        - Key: Name
          Value: Application-Load-Balancer

  TargetGroupForApplicationLoadBalancer:
    Description: Define the Target Group for Application Load Balancer.
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 80
      Protocol: HTTP
      VpcId: !Ref VirtualPrivateCloud
      TargetType: instance
      Targets:
        - Id: !Ref ApplicationServer1
        - Id: !Ref ApplicationServer2
  ListenerForApplicationLoadBalancer:
    Description: Create a listener for the Application Load Balancer.
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions: 
        - Type: forward
          TargetGroupArn: !Ref TargetGroupForApplicationLoadBalancer
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP          
    


##############################################################################################################

# Define the input parameters

Parameters:

  VPCCidrBlock:
    Description: CIDR Block for the VPC.
    Type: String
    Default: "172.1.0.0/16"

  KeyName: 
    Description: A key pair that could be used to accessed the EC2 instance.
    Type: AWS::EC2::KeyPair::KeyName

  ApplicationImageId:
    Description: AMI Id to be used for launching the instance.
    Type: String

  ApplicationInstanceType: 
    Description: Instance type to be launched. Use t2.micro for free tier.
    Type: String
    AllowedValues: 
    - t2.nano
    - t2.micro
    - t2.small
    - t2.medium
    - t2.large
    - t2.xlarge
    - t2.2xlarge
    Default: t2.micro
    ConstraintDescription: Must be a valid t2 type instance.

  

      

    
